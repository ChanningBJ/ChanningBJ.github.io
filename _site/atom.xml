<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Channing's Blog</title>
 <link href="http://channingbj.github.io//" rel="self"/>
 <link href="http://channingbj.github.io/"/>
 <updated>2015-10-13T00:06:05+08:00</updated>
 <id>http://channingbj.github.io/</id>
 <author>
   <name>Channing Wang</name>
   <email></email>
 </author>

 
 <entry>
   <title>使用 MAVEN 进行不同环境的服务配置文件管理</title>
   <link href="http://channingbj.github.io//default/2015/10/12/mavenmultienv"/>
   <updated>2015-10-12T00:00:00+08:00</updated>
   <id>http://channingbj.github.io//default/2015/10/12/mavenmultienv</id>
   <content type="html">&lt;p&gt;在实际用中，我们的Java服务通常要部署在不同的环境中，并且每个环境有只适用于本环境的配置文件。
例如测试环境需要连接测试数据库，生产环境又会在不同的机房进行服务部署，需要连接本机房的数据库从库。
同时，每个环境的配置又有很多相同的部分，比如cache的超时时间等。本文介绍如何使用maven进行多个部署环境的配置文件管理。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;对于多个运行环境的配置文件管理，比较原始的方法是为每一个部署环境创建一个配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resources
├── prod_beijing_config.properties
├── prod_shanghai_config.properties
├── dev_config.properties
└── config.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的例子中我们配置了两个正式环境的配置文件，分别是北京机房和上海机房；配置了一个开发环境的配置文件，还有一个本地运行使用的配置文件。
在读取配置文件的时候，通过系统变量进行选择某一个配置文件或者在部署脚本中将不同机房的配置文件按照部署的环境不同进行上传。&lt;/p&gt;

&lt;p&gt;这样做的问题有：
1. 实现复杂，需要在Java程序或者在部署脚本中进行处理
2. 各个部署环境公用的配置要维护多份。例如需要新增一个和部署环境无关的配置项，需要在所有的配置文件中依次添加，稍有不慎酒会造成部署失败。&lt;/p&gt;

&lt;p&gt;下面介绍一种使用maven进行配置文件管理的方法，可以做到：
1. 加载配置文件的过程对应用程序透明，不管在哪个环境中都只需要加载 config.properties
2. 公共配置项在一个文件中维护&lt;/p&gt;

&lt;p&gt;首先修改项目的config.properties，将需要根据运行环境不同取不同值的配置项目用变量代替，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql.host = ${mysql.host}
mysql.port = ${mysql.port}

cache.size = 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在项目的根目录上创建一个 profiles 目录，存放所有运行环境的配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── README.md
├── pom.xml
├── profiles
│   ├── beijing_config.properties
│   ├── shanghai_config.properties
│   └── dev_config.properties
├── src
│   ├── main
│   │   ├── java
│   │   │   └── com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意这里每个机房的配置文件中只包含需要根据运行环境不同取不同值的配置项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat profiles/beijing_config.properties
mysql.host = beijing.mysql.domain
mysql.port = 4534

$ cat profiles/shanghai_config.properties
mysql.host = shanghai.mysql.domain
mysql.port = 4534

$ cat profiles/dev_config.properties
mysql.host = test.mysql.host
mysql.port = 4534
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最关键的部分是pom.xml的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;demo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;demo&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
    &amp;lt;/properties&amp;gt;

    ....

    &amp;lt;profiles&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;dev&amp;lt;/id&amp;gt;
            &amp;lt;activation&amp;gt;
                &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
            &amp;lt;/activation&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;build.profile.id&amp;gt;dev&amp;lt;/build.profile.id&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;beijing&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;build.profile.id&amp;gt;beijing&amp;lt;/build.profile.id&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;shanghai&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;build.profile.id&amp;gt;shanghai&amp;lt;/build.profile.id&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
    &amp;lt;/profiles&amp;gt;

    &amp;lt;build&amp;gt;
        ...
        &amp;lt;filters&amp;gt;
            &amp;lt;filter&amp;gt;profiles/${build.profile.id}_config.properties&amp;lt;/filter&amp;gt;
        &amp;lt;/filters&amp;gt;
        &amp;lt;resources&amp;gt;
            &amp;lt;resource&amp;gt;
                &amp;lt;directory&amp;gt;src/main/resources/&amp;lt;/directory&amp;gt;
                &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;/resource&amp;gt;
        &amp;lt;/resources&amp;gt;
        ...
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个pom文件中，我们首先定义了三个profile，dev profile 中将 build.profile.id 的值设置为 dev，beijing profile 中将 build.profile.id 的值设置为 beijing，shanghai profile 中将 build.profile.id 的值设置为 shanghai。
同时，这个配置中还指定了资源文件的位置是 src/main/resources/， 在生成这些资源文件的时候使用 profiles/${build.profile.id}_config.properties 中定义的变量进行内容的替换。&lt;/p&gt;

&lt;p&gt;在打包的时候，如果我们执行：&lt;code&gt;mvn package -D beijing&lt;/code&gt; ， 这时首先会找到beijing的profile，将build.profile.id赋值为beijing，
这样定义变量的文件名就变成了 profiles/beijing_config.properties， 将config.properties 打入war包的时候会从 profiles/beijing_config.properties 中读取 &lt;code&gt;${mysql.host}&lt;/code&gt; 和 &lt;code&gt;${mysql.port}&lt;/code&gt; 的值。最后war包中的 config.properties
就变成了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql.host = beijing.mysql.domain
mysql.port = 4534

cache.size = 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当没有指定 -D 选项的时候，由于 dev 这个环境配置了 &lt;code&gt;&amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;&lt;/code&gt; ，所以会被默认启用。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MyBatis 使用annonation定义类型映射</title>
   <link href="http://channingbj.github.io//java/2015/09/12/mybatis-annonation"/>
   <updated>2015-09-12T00:00:00+08:00</updated>
   <id>http://channingbj.github.io//java/2015/09/12/mybatis-annonation</id>
   <content type="html">&lt;p&gt;介绍如何使用annonation的方式定义数据库字段到Java成员变量直接的映射关系，以及定义数据库表中的类型到Java类型的自定义转换&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;关于如何配置MyBatis进行Java对象和Mysql表之间的映射可以参照 &lt;a href=&quot;http://channingbj.github.io/java/2015/09/04/usemybits/&quot;&gt;这片文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;下面是一个最基础的映射关系配置：
    public interface SimpleMapper {
        @Select(“select url from testdb.MY_BATIS_TEST;”)
        Set&lt;record&gt; selectRecords();
    }
在默认的配置中，mysqk表的字段会映射到同名字的java成员变量，这里我们看如何设置映射到其他的变量，以及如何进行类型转换&lt;/record&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;自定义映射关系&lt;/h1&gt;

&lt;p&gt;如果我们的DB中的一列名称是support_os_version类型是VARCHAR，但是在Java代码中对应的变量是 &lt;code&gt;String supportOSLevel&lt;/code&gt;，可以进行如下定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface SimpleMapper {
    @Select(&quot;select url from testdb.MY_BATIS_TEST;&quot;)
    @Results(value = {
            @Result(property = &quot;support_os_version&quot;, column = &quot;supportOSLevel&quot;),
    })
    Set&amp;lt;Record&amp;gt; selectRecords();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-1&quot;&gt;定义类型映射&lt;/h1&gt;

&lt;p&gt;如果我们的support_os_version列是一个使用逗号分割的版本号里表，
在Java中我们想映射到 &lt;code&gt;String[] supportOSLevel&lt;/code&gt;, 可以通过定义 typeHandler 的方式进行映射。&lt;/p&gt;

&lt;p&gt;首先定义一个从String到String[]的转换类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StringSplitHandler extends BaseTypeHandler&amp;lt;String[]&amp;gt; {

    private static final Joiner joiner = Joiner.on(&quot;,&quot;);

    @Override
    public void setNonNullParameter(PreparedStatement preparedStatement, int i, String[] strings, JdbcType jdbcType) throws SQLException {
        preparedStatement.setString(i, joiner.join(strings));
    }

    @Override
    public String[] getNullableResult(ResultSet resultSet, String columnName) throws SQLException {
        String data = resultSet.getString(columnName);
        if(StringUtils.isEmpty(data)) {
            return new String[0];
        } else {
            return data.split(&quot;,&quot;);
        }
    }

    @Override
    public String[] getNullableResult(ResultSet resultSet, int columnIndex) throws SQLException {
        String data = resultSet.getString(columnIndex);
        if(StringUtils.isEmpty(data)) {
            return new String[0];
        } else {
            return data.split(&quot;,&quot;);
        }
    }

    @Override
    public String[] getNullableResult(CallableStatement callableStatement, int columnIndex) throws SQLException {
        String data = callableStatement.getString(columnIndex);
        if(StringUtils.isEmpty(data)) {
            return new String[0];
        } else {
            return data.split(&quot;,&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在映射关系的定义中指定这个类作为typeHandler&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface SimpleMapper {
    @Select(&quot;select url from testdb.MY_BATIS_TEST;&quot;)
    @Results(value = {
            @Result(property = &quot;support_os_version&quot;, column = &quot;supportOSLevel&quot;, typeHandler = StringSplitHandler.class),
    })
    Set&amp;lt;Record&amp;gt; selectRecords();
}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>MyBatis 基本用法</title>
   <link href="http://channingbj.github.io//java/2015/09/04/usemybits"/>
   <updated>2015-09-04T00:00:00+08:00</updated>
   <id>http://channingbj.github.io//java/2015/09/04/usemybits</id>
   <content type="html">&lt;!--more--&gt;

&lt;h1 id=&quot;mapping&quot;&gt;定义mapping类&lt;/h1&gt;

&lt;p&gt;MyBatis 有两种定义查询结果到 Java 类的映射关系的方式，一种是通过xml文件定义，一种是通过Java annonation 定义，这里使用第二种方法。
现在我们有一张mysql的表定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `MY_BATIS_TEST` (
  `id` varchar(255) NOT NULL DEFAULT &#39;&#39;,
  `url` varchar(255) DEFAULT NULL
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先定义table一条数据在Java中对应的class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Redord {
    public String url;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义sql查询到Java class 结果集合的映射：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface SimpleMapper {

    @Select(&quot;select url from testdb.MY_BATIS_TEST limit 1;&quot;)
    Redord selectOneRecord();

    @Select(&quot;select url from testdb.MY_BATIS_TEST;&quot;)
    Set&amp;lt;Record&amp;gt; selectRecords();

    @Select(&quot;select url from testdb.MY_BATIS_TEST where id=#{id};&quot;)
    Record selectRecordByID(int id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;mapping-1&quot;&gt;初始化并注册mapping类&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Properties properties = new Properties();
properties.setProperty(&quot;driver&quot;, &quot;com.mysql.jdbc.Driver&quot;);
properties.setProperty(&quot;url&quot;, &quot;jdbc:mysql://127.0.0.1:3306/testdb&quot;);
properties.setProperty(&quot;username&quot;, &quot;the_user_name&quot;);
properties.setProperty(&quot;password&quot;, &quot;the_password&quot;);
PooledDataSourceFactory pooledDataSourceFactory = new PooledDataSourceFactory();
pooledDataSourceFactory.setProperties(properties);
DataSource dataSource = pooledDataSourceFactory.getDataSource();
Environment environment = new Environment(&quot;development&quot;, new JdbcTransactionFactory(), dataSource);

Configuration configuration = new Configuration(environment);
configuration.addMapper(SimpleMapper.class); //注册mapping类

SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;mysql&quot;&gt;从mysql中查询数据&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;SqlSession session = sqlSessionFactory.openSession();
try{
    PluginMapper mapper = session.getMapper(PluginMapper.class);
    Plugin pl = mapper.selectPluginsByID(1000);
    System.out.println(pl.url);
} finally {
    session.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section&quot;&gt;全局唯一以及线程安全&lt;/h1&gt;

&lt;p&gt;SqlSessionFactory 可以在整个app的生命周期中只创建一次，SqlSession需要在每次执行sql的函数中创建一次并且使用后需要进行关闭：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SqlSession session = sqlSessionFactory.openSession();
try {
  // do work
} finally {
  session.close();
}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>gitlab与jenkins协同工作</title>
   <link href="http://channingbj.github.io//cicd/2015/08/15/gitlab-jenkins"/>
   <updated>2015-08-15T00:00:00+08:00</updated>
   <id>http://channingbj.github.io//cicd/2015/08/15/gitlab-jenkins</id>
   <content type="html">&lt;p&gt;介绍如何在配置gitlab在commit以后自动触发jenkins job进行build，并且在成功后添加git tag&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;gitlab-push--jenkins-job&quot;&gt;gitlab push 触发 Jenkins Job&lt;/h1&gt;

&lt;p&gt;配置后的效果：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;向分支push后自动触发jenkins job&lt;/li&gt;
  &lt;li&gt;jenkins job 成功执行后为当前的commit添加一个标签，方便以后进行线上回滚&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要安装的插件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gitlab Hook Plugin&lt;/li&gt;
  &lt;li&gt;GitLab Plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jenkins-job-&quot;&gt;Jenkins Job 的设置&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;设置源代码仓库&lt;/h3&gt;

&lt;p&gt;首先在Jenkins创建一个job，在“源码管理”中指定git并设置URL。
在 Branch Specifier 中填写 &lt;code&gt;*/dev*&lt;/code&gt; 表示只有dev开头的分支有push操作的时候才会触发这个job。
&lt;img src=&quot;/pic/2015-09-04T08:15:15.864Z.png&quot; alt=&quot;&quot; /&gt;
设置中的“Repository URL”是gitlab中SSH方式的URL，如下：
&lt;img src=&quot;/pic/2015-08-15T07:55:12.689Z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置触发器：
&lt;img src=&quot;/pic/2015-09-04T08:18:28.742Z.png&quot; alt=&quot;&quot; /&gt;
这里 Build when a change is pushed to GitLab. GitLab CI Service URL 的值后面需要填写到gitlab的push hook中&lt;/p&gt;

&lt;p&gt;在“Credentials”中添加一个用户的认证方式，这里我们选择ssh key的方式：
&lt;img src=&quot;/pic/2015-08-15T07:57:23.624Z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;buildgitlab&quot;&gt;配置build成功以后在gitlab上打标签&lt;/h3&gt;

&lt;p&gt;首先在源代码管理中为这个仓库起一个名字：
&lt;img src=&quot;/pic/2015-08-15T08:05:49.934Z.png&quot; alt=&quot;&quot; /&gt;
创建一个构建后的操作“GIT Publisher”, 在 Target remote name 中填写仓库的名字。TAG的名称可以引用Jenkins的环境变量，如 B$BUILD_NUMBER
&lt;img src=&quot;/pic/2015-08-15T08:04:23.731Z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gitlab-&quot;&gt;GitLab 设置&lt;/h2&gt;

&lt;h3 id=&quot;jeknins&quot;&gt;设置jeknins用户的权限&lt;/h3&gt;
&lt;p&gt;在gitlab项目中，将jenkins的公钥添加到当前项目master用户中。如果不需要构建成功后打标签的话可以在deploy key 中添加jenkins的公钥。
&lt;img src=&quot;/pic/2015-08-15T08:11:58.573Z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;jenkins在给git分支打标签的时候会进行push操作，而deploy key只有可读的权限。&lt;/p&gt;

&lt;h3 id=&quot;push-hook&quot;&gt;设置push hook&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pic/2015-09-04T08:21:04.153Z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里添加一个push的webhook，URL为jenkins job触发器配置中 &lt;code&gt;Build when a change is pushed to GitLab. GitLab CI Service URL&lt;/code&gt; 对应的值&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>开始使用 Jeckll 写博客</title>
   <link href="http://channingbj.github.io//tools/2015/08/08/the-sample-post"/>
   <updated>2015-08-08T00:00:00+08:00</updated>
   <id>http://channingbj.github.io//tools/2015/08/08/the-sample-post</id>
   <content type="html">&lt;!--more--&gt;

&lt;h1 id=&quot;atom-jeckll-&quot;&gt;atom jeckll 插件&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/jekyll&quot;&gt;插件下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以使用 &lt;code&gt;new post&lt;/code&gt; 命令创建一个新的页面。如果需要修改模版，可以更改源码
&lt;code&gt;~/.atom/packages/jekyll/lib/new-post-view.coffee&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fileContents: (title, dateString) -&amp;gt;
    [
      &#39;---&#39;
      &#39;layout: post&#39;
      &#39;category: default&#39;
      &quot;title: \&quot;#{title}\&quot;&quot;
      &quot;date: \&quot;#{dateString}\&quot;&quot;
      &#39;---&#39;
      &#39;Short desc&#39;
      &#39;&#39;
      &#39;&amp;lt;!--more--&amp;gt;&#39;
    ].join(os.EOL)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section&quot;&gt;设置表格边框&lt;/h1&gt;

&lt;p&gt;在文件 &lt;code&gt;assets/themes/Snail/css/main.css&lt;/code&gt; 中加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table {
    border-collapse:collapse;
    border-spacing:0;
    border:1px solid black;
}

td {
    text-align:left;
    font-weight:normal;
    vertical-align:middle;
    border:1px solid black;
    padding:5px;
}

th {border: 1px solid black;
    padding:5px;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到下面的效果：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;page items&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;dd&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;dd&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;section-1&quot;&gt;添加页面访问量&lt;/h1&gt;

&lt;p&gt;使用了&lt;a href=&quot;http://ibruce.info/2015/04/04/busuanzi/&quot;&gt;不蒜子&lt;/a&gt;的页面访问统计工具。
首先在 &lt;code&gt;_includes/themes/Snail/default.html&lt;/code&gt; 添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在 &lt;code&gt;_includes/themes/Snail/post.html&lt;/code&gt; 模版中自己需要的位置添加上显示访问统计的脚本，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;HR style=&quot;border:1 dashed #987cb9&quot; width=&quot;80%&quot; color=#987cb9 SIZE=1&amp;gt;
  &amp;lt;div class=&quot;journal-date&quot;&amp;gt;发布时间 08 August 2015 &amp;lt;/br&amp;gt;
&amp;lt;span id=&quot;busuanzi_container_page_pv&quot;&amp;gt;访问次数 &amp;lt;span id=&quot;busuanzi_value_page_pv&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 
</feed>
